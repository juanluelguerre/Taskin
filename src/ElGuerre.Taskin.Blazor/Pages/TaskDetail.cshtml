@using ElGuerre.Taskin.Models
@using System.Threading.Tasks
@using ElGuerre.Taskin.Blazor.Extensions

@page "/taskdetail/{TaskId}"
@inject HttpClient Http

<div class="page-header">
    <h1>  </h1>
</div>

@if (Task == null)
{
    <p><em>No task found</em></p>
}
else
{
    <div class="form-group row">
        <label for="task-detail" class="col-2 col-form-label">Detail</label>
        <div class="col-10">
            <input class="form-control" type="text" value="@Task.Detail" id="detail">
        </div>
    </div>
    <div class="form-group row">
        <label for="task-detail" class="col-2 col-form-label">Type</label>
        <div class="col-10">
            <select class="form-control" id="taskType">
                @foreach (var type in GetAllTaskTypes())
                {
                    <option value="@type.Key">@type.Value</option>
                }
            </select>
        </div>
    </div>

    <div class="form-group row">
        <label for="task-detail" class="col-2 col-form-label">Priority</label>
        <div class="col-10">
            <input class="form-control" type="text" value="@Task.Priority" id="priority">
        </div>
    </div>
    <div class="form-group row">
        <label for="task-detail" class="col-2 col-form-label">Effort</label>
        <div class="col-10">
            <input class="form-control" type="text" value="@Task.Effort" id="effort">
        </div>
    </div>
}

@functions {
[Parameter]
string TaskId { get; set; }

TaskModel Task { get; set; }

private IList<KeyValuePair<int, string>> GetAllTaskTypes()
{
    // return Enum.GetValues(typeof(TaskType)) as IEnumerable<int>;
    return typeof(TaskType).ToValueList<int>();
}

protected override async Task OnInitAsync()
{
    Task = await Http.GetJsonAsync<TaskModel>($"/api/tasks/{TaskId}");
}
}
