@using ElGuerre.Taskin.Models
@using System.Threading.Tasks

@using ElGuerre.Taskin.Blazor.Extensions
@using ElGuerre.Taskin.Blazor.Utils

@page "/taskdetail/{TaskId}"
@inject HttpClient Http

<div class="page-header">
    <h1>  </h1>
</div>

@if (CurrentTask == null)
{
    <p><em>No task found</em></p>
}
else
{
    <div class="form-group row">
        <label for="task-detail" class="col-2 col-form-label">Detail</label>
        <div class="col-10">
            <input class="form-control" type="text" bind="@CurrentTask.Detail" id="detail" />
        </div>
    </div>
    <div class="form-group row">
        <label for="task-detail" class="col-2 col-form-label">Type</label>
        <div class="col-10">
            <select class="form-control" id="taskType">
                @foreach (var type in GetAllTaskTypes())
                {
                    <option value="@type.Key">@type.Value</option>
                }
            </select>
        </div>
    </div>

    <div class="form-group row">
        <label for="task-detail" class="col-2 col-form-label">Priority</label>
        <div class="col-10">
            <input class="form-control" type="number" bind="@CurrentTask.Priority" id="priority" />
        </div>
    </div>
    <div class="form-group row">
        <label for="task-detail" class="col-2 col-form-label">Effort</label>
        <div class="col-10">
            <input class="form-control" type="number" bind="@CurrentTask.Effort" id="effort" />
        </div>
    </div>

    <div class="form-group row">
        <div class="col-2">
            <button class="btn btn-info" onclick="@(() => Update())">Save</button>
        </div>
    </div>
}

<ManualRefreshChild NumberOfElements=@CurrentTask></ManualRefreshChild>

@functions {
    [Parameter]
    string TaskId { get; set; }

    string _baseUrl { get; set; }
    TaskModel CurrentTask { get; set; }

    private IList<KeyValuePair<int, string>> GetAllTaskTypes()
    {
        // return Enum.GetValues(typeof(TaskType)) as IEnumerable<int>;
        return typeof(TaskType).ToValueList<int>();
    }

    protected override async Task OnInitAsync()
    {
        _baseUrl = ServiceHelper.GetServiceUrl();
        CurrentTask = await Http.GetJsonAsync<TaskModel>($"{_baseUrl}/tasks/{TaskId}");
    }

    private async Task Update()
    {
        Console.WriteLine("Saving...");

        Console.WriteLine($"{CurrentTask.Detail}");

        // Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(CurrentTask));
        //Console.WriteLine(JsonUtil.Serialize(CurrentTask));


        var content = new JsonContent(CurrentTask);

        // Console.WriteLine(content);

        //await Task.CompletedTask;

        await Http.PutAsync($"{_baseUrl}/tasks/{TaskId}", content);
    }

}
